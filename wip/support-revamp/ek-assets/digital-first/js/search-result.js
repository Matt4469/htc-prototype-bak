var selCount=1,searchResult=function(){"use strict";var e={clsNameHiddenSearchContentType:"hidden-search-content-type",clsNameHiddenSearchContentTypeDisplay:"hidden-search-content-type-display",clsNameHiddenSearchProductNameId:"hidden-search-product-name-id",clsNameHiddenSearchProductNameIdDisplay:"hidden-search-product-name-id-display"},t={init:function(){var e=$.url();void 0!==e.param("q")?($(".search-box input").val(e.param("q")),t.storeUrlParams()):location.href+="?q=htc"},storeUrlParams:function(){var t=$.url();void 0!==t.param("content_type")&&$("."+e.clsNameHiddenSearchContentType).val(t.param("content_type")),void 0!==t.param("content_type_display")&&$("."+e.clsNameHiddenSearchContentTypeDisplay).val(t.param("content_type_display")),void 0!==t.param("product_name_id")&&$("."+e.clsNameHiddenSearchProductNameId).val(t.param("product_name_id")),void 0!==t.param("product_name_id_display")&&$("."+e.clsNameHiddenSearchProductNameIdDisplay).val(t.param("product_name_id_display"))},scrollToTop:function(){$("body").scrollTop(0)}};return t}(),resultList=function(){"use strict";var e,t,a={maxPagintionTotal:990,resultsPerRequest:10,clsNameGetHelp:"get-help",clsNameLoader:"loader-container",clsNameHasResult:"has-result",clsNameNoResult:"no-result",clsNameResultContainer:"search-result-info",clsNamePaginationContainer:"pagination-container",claNameAmountContaner:"amount",clsNameHiddenParamQ:"hidden-param-q",clsNameHiddenParamPagination:"hidden-param-pagination"},n={init:function(){},stripHTML:function(e){var t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText},showGetHelp:function(){$("."+a.clsNameGetHelp).addClass("active")},hideGetHelp:function(){$("."+a.clsNameGetHelp).removeClass("active")},showLoader:function(){$("."+a.clsNameLoader).show()},hideLoader:function(){$("."+a.clsNameLoader).hide()},hasResultSetting:function(){$("."+a.clsNameHasResult).removeClass("hidden"),n.hideLoader()},noResultSetting:function(){$("."+a.clsNameNoResult).removeClass("hidden"),n.hideLoader()},hideAllWhenAjax:function(){$("."+a.clsNameHasResult).addClass("hidden"),$("."+a.clsNameNoResult).addClass("hidden"),n.showLoader(),n.clearResult()},clearResult:function(){$("."+a.clsNameResultContainer).html("")},setupAmountSpan:function(e){$("."+a.claNameAmountContaner).text(e)},setupPagination:function(e,i){e>a.maxPagintionTotal&&(e=a.maxPagintionTotal),$("."+a.clsNamePaginationContainer).pagination({dataSource:function(t){for(var a=[],n=1;n<=e;n++)a.push(n);t(a)},pageNumber:parseInt(i,10),pageRange:2,afterPageOnClick:function(e,a){t.val(a),n.pushParams()},afterPreviousOnClick:function(e,a){t.val(a),n.pushParams()},afterNextOnClick:function(e,a){t.val(a),n.pushParams()},callback:function(){n.updatePaginationSize(),searchResult.scrollToTop()}})},updatePaginationSize:function(){var e=$(".paginationjs");e.length>0&&($(window).width()<=commonSetting.mobileMaxReserlution()?e.addClass("paginationjs-small"):e.removeClass("paginationjs-small"))},loadResults:function(e){var t=searchData.setupAjaxCall(e,a.resultsPerRequest);searchData.cancleAjaxCall(),_ajaxCall=$.ajax({type:"GET",url:t.baseSearchURL,data:t.queryParam,dataType:"json",jsonp:!0,async:!0,cache:!1,beforeSend:function(){n.hideGetHelp(),n.hideAllWhenAjax()},success:function(t){var i=$("."+a.clsNameResultContainer);searchData.buildResultTemplate(t,i,function(t){t>0?(t>a.resultsPerRequest&&n.setupPagination(t,e),n.hasResultSetting(),n.setupAmountSpan(t)):n.noResultSetting()}),n.showGetHelp()},error:function(e){n.noResultSetting()}})},initObj:function(){e=$("."+a.clsNameHiddenParamQ),t=$("."+a.clsNameHiddenParamPagination)},updateHiddenInput:function(a){var i=$.url(),s=i.param("q"),l=i.param("pagination");n.initObj(),e.val(""),t.val(1),void 0!==s&&(e.val(s),void 0!==l&&t.val(l)),a()},pushParams:function(){var a=e.val(),n=t.val(),i="";void 0!==a&&a.length>0&&(i+="&q="+a),void 0!==n&&n.length>0&&(i+="&pagination="+n),i.length>0&&(i="?"+i.substring(1,i.length)),History.pushState({rand:Math.random(),q:a,pagination:n},document.title,i)},restorePageStatus:function(e){searchResult.init(),n.loadResults(t.val())}};return n}(),filter=function(){"use strict";var e={init:function(){$(".filter").find(".btn-filter").click(function(){$(".btn-filter").parents(".filter-amount-area").hasClass("open")?$(".btn-filter").parents(".filter-amount-area").removeClass("open"):$(".btn-filter").parents(".filter-amount-area").addClass("open")}),e.select()},setSelectListWidth:function(){var e=0;e=$(".filter-select").find(".td:nth-of-type(1)").width(),$(".btn-filter").width(e),$(".filter-list").width($(".filter").width()-$(".btn-filter").width()-26)},select:function(){var t=0,a="",n="";$(".filter-select").find("li").click(function(){if(!$(this).hasClass("chosen")&&!$(this).parent("ul").find("li.chosen").length){$(this).parent("ul").find("li").css({cursor:"default"}),$(this).addClass("chosen"),t=$(this).index()+1,a=$(this).parent("ul").attr("class"),n=$(this).html();var i={category:a,index:t,value:n};$(".filter-list").find("ul").append(tmpl("filter-chosen-list",i)),e.removeSelect(selCount),selCount++}})},removeSelect:function(e){$(".filter-list").find("li:nth-of-type("+e+")").click(function(){var e=0,t="";t=$(this).attr("class").split(" ")[0],e=$(this).attr("class").split(" ")[1],$(".btn-filter").parents(".filter-amount-area").hasClass("open")||$(".btn-filter").parents(".filter-amount-area").addClass("open"),$("."+t).find("li:nth-of-type("+e+")").removeClass("chosen"),$("."+t).find("li").css({cursor:"pointer"}),$(this).unbind("click"),$(this).remove(),selCount--})}};return e}();$(document).ready(function(){"use strict"}),$(window).resize(function(){"use strict";resultList.updatePaginationSize()}),function(e,t){"use strict";"file:"===document.location.protocol&&alert("The HTML5 History API (and thus History.js) do not work on files, please upload it to a server."),resultList.updateHiddenInput(function(){resultList.restorePageStatus(!0)}),History.Adapter.bind(e,"statechange",function(){History.getState();resultList.updateHiddenInput(function(){resultList.restorePageStatus(!1)})})}(window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
