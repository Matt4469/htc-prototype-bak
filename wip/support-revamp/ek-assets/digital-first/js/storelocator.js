$(document).ready(function(){"use strict";if($(".store-locator-container").length>0){$("#aspnetForm").bind("keyup keypress",function(t){if(13===(t.keyCode||t.which))return t.preventDefault(),!1});var t=$("body").data("site"),e="m",a=!1,o=!1;($("html").hasClass("mobile")||$(window).width()<720)&&(o=!0),"1"===$("#hidden-distance-unit").val()&&(e="km"),"sea"!==t&&"mea-sa"!==t&&"mea-en"!==t||(a=!0),$("#map-container").storeLocator({htcSite:t,htcLoadMapInBeginning:!1,htcShowCountrySelecttion:a,defaultUnit:e,isMobile:o,htcDefaultAddress:""})}$(".where-to-buy-container").length>0&&(document.domain="htc.com",$("iframe").length>0&&($("iframe").on("load",function(){$(this).height($(this).contents().find("html").height()+28),$("body").animate({scrollTop:"0px"})}),$("iframe").attr("src","/"+$("body").data("site")+"/support/where_to_buy_iframe.aspx")))}),$(window).resize(function(){"use strict"}),function(t){"use strict";t.fn.storeLocator=function(e){var a,o,i,n=t.extend({mapMainContainerDiv:"map-container",mapListDiv:"map-loc-list",mapDiv:"map-area",listMainContainerDiv:"listview-container",listListDiv:"view-loc-list",inputID:"txt-address",addressSubmitInput:"submit-address",geoIconDiv:"geo-icon",resetIconDiv:"reset-icon",switchViewDiv:"switch-button",showGeoIcon:!0,zoomLevel:17,dataType:"xml",dataLocation:"/support/storelocator-get.aspx",bounceMarker:!0,autoGeocode:!0,fullMapStart:!1,loading:!0,loadingDiv:"loading-map",infowindowTemplatePath:"/ek-assets/templates/infowindow-description.html",listTemplatePath:"/ek-assets/templates/location-list-description.html",callbackBeforeSend:null,callbackComplete:null,callbackSuccess:null,callbackModalOpen:null,callbackModalClose:null,jsonpCallback:null,prefix:"storeLocator",htcSite:"www",htcLoadMapInBeginning:!1,htcShowCountrySelecttion:!1,htcDefaultAddress:"",htcListDataLocation:"/support/storelocator-get.aspx",htcListviewTemplatePath:"/ek-assets/templates/htc-listview.html",htcPageViewType:"map",htcListViewItemPerPage:12,htcListViewMaxItem:25,htcMapViewItemPerPage:25,htcMapViewMaxItem:25,MapCurrentPage:0,ListCurrentPage:0,blankInputAlert:"The input box was blank.",addressErrorAlert:"Unable to find address",autoGeocodeErrorAlert:"Automatic location detection failed. Please fill in your address or zip code.",distanceErrorAlert:"Whoops, we could not find you. Please check the location you entered or try again.",mileLang:"MILE",milesLang:"MILES",kilometerLang:"KM",kilometersLang:"KM",htcRcDirections:"Get Directions",defaultUnit:"m",isMobile:!1,firstTimeRun:!0},e),s=[],l=[],r=!0;return t.store={load_templates:function(){t.get(n.infowindowTemplatePath,function(t){var e=t;o=Handlebars.compile(e)}),t.get(n.listTemplatePath,function(t){var e=t;a=Handlebars.compile(e)})},publish:function(){var e,l=[];if("map"===n.htcPageViewType)var r={zoom:n.zoomLevel,mapTypeControl:!1,mapTypeId:google.maps.MapTypeId.ROADMAP},c=new google.maps.LatLngBounds,d=new google.maps.Map(t("#"+n.mapDiv)[0],r),u={disableAutoPan:!1,alignBottom:!0,maxWidth:0,boxClass:"custom-infobox",pixelOffset:new google.maps.Size(-81,-35),zIndex:null,boxStyle:{"font-family":"Avenir-Medium"},closeBoxMargin:"0",infoBoxClearance:new google.maps.Size(1,1),isHidden:!1,pane:"floatPane",enableEventPropagation:!1},p=new InfoBox(u);t(function(){function r(e,a,i,s){var l=o(s);"left"===a?(p.setContent(l),p.open(d,e)):google.maps.event.addListener(e,"click",function(){p.setContent(l),p.open(d,e),t("#"+n.mapListDiv+" li").removeClass("list-focus"),t("#"+n.mapListDiv+" li[data-markerid="+i+"]").addClass("list-focus");var a=t("#"+n.mapListDiv),o=t("#"+n.mapListDiv+" li[data-markerid="+i+"]");t("#"+n.mapListDiv).animate({scrollTop:o.offset().top-a.offset().top+a.scrollTop()})})}function u(t){m=s[t][0],f=s[t][1],g=s[t][2],v=s[t][3],w=s[t][4],y=s[t][5],L=s[t][6],b=s[t][7],C=s[t][8],D=s[t][9],P=s[t][10],_=s[t][11],x=s[t][12],k=s[t][13],M=s[t][14]}function h(t){var e=t,a=t+1;if(u(e),""!==M){var o=n.mileLang,s=n.milesLang;"m"!==n.defaultUnit&&(M*=1.6093,o=n.kilometerLang,s=n.kilometersLang),M=Math.round(10*M)/10,M+=M>=1?" "+s:" "+o}return{location:[{markerid:e,marker:e,iconId:a,name:m,address:v,address2:w,phone:C,web:D,hours1:P,hours2:_,hours3:x,searchedAddressLocation:i,lat:f,lon:g,direction:n.htcRcDirections,distance:M}]}}var m,f,g,v,w,y,b,L,C,D,k,M,P,_,x,I,S,T,A,V,E=0,G=0;"map"===n.htcPageViewType?(T=n.htcMapViewItemPerPage,A=n.htcMapViewMaxItem,V=n.MapCurrentPage):(T=n.htcListViewItemPerPage,A=n.htcListViewMaxItem,V=n.ListCurrentPage),I=V*T,S=(V+1)*T-1,E=V-1,G=V+1,I<0&&(I=0),S>=s.length&&(S=s.length-1,G=-1),S>=A-1&&(S=A-1,G=-1),"map"===n.htcPageViewType?(t.controls_page_next.setup(G),t.controls_page_previous.setup(E),t("#"+n.mapMainContainerDiv).show()):(t.controls_load_more_stores.setup(G),t.controls_list_page_next.setup(G),t.controls_list_page_previous.setup(E),t("#"+n.listMainContainerDiv).show(),n.isMobile&&(I=0));for(var $=I;$<=S;$++){var B=s[$][1],R=s[$][2],j=new google.maps.LatLng(B,R),z=$,U=h(z);!function(t,a,o,i){var n=new google.maps.LatLng(t,a),s=41*o,c=new google.maps.MarkerImage("http"+(/^https/.test(location.protocol)?"s":"")+"://www.htc.com/managed-assets/shared/desktop/where-to-buy/map-icons/sprite-marker.png",new google.maps.Size(38,36),new google.maps.Point(0,s),new google.maps.Point(2,22));e=new google.maps.Marker({position:n,map:d,icon:c,draggable:!1}),e.set("id",o),l[o]=e,r(e,"",o,i)}(B,R,z,U),"map"===n.htcPageViewType?(!0===n.fullMapStart&&c.extend(j),function(e){var o=a(e);t("#"+n.mapListDiv+" ul").append(o)}(U)):function(e){var o=a(e);t("#"+n.listListDiv+" ul").append(o)}(U)}"map"===n.htcPageViewType&&(!0===n.fullMapStart&&d.fitBounds(c),t(document).on("click."+n.prefix,"#"+n.mapListDiv+" > ul > li",function(){var e=t(this).data("markerid"),a=l[e],o=h(e);if(void 0!==a){d.panTo(a.getPosition());!0===n.bounceMarker?(a.setAnimation(google.maps.Animation.BOUNCE),setTimeout(function(){a.setAnimation(null),r(a,"left",e,o)},700)):r(a,"left",e,o),t("#"+n.mapListDiv+" li").removeClass("list-focus"),t("#"+n.mapListDiv+" li[data-markerid="+e+"]").addClass("list-focus")}}),t("#"+n.mapListDiv+" ul li:even").addClass("even"),t("#"+n.mapListDiv+" ul li:odd").addClass("odd"),t("#"+n.mapListDiv+" ul li:last").addClass("last"),t("#"+n.mapListDiv+" ul li:first").click())})},filter:function(e){function a(e){t.ajax({type:"GET",url:e,dataType:n.dataType,jsonpCallback:"jsonp"===n.dataType?n.jsonpCallback:null,beforeSend:function(){n.callbackBeforeSend&&n.callbackBeforeSend.call(this)},complete:function(e,a,o){n.callbackComplete&&n.callbackComplete.call(this,e,a,o),t.store.publish()},success:function(e,a,o){t("#hidden-state").val(),t("#hidden-city").val();if("xml"===n.dataType){var i=0;t(e).find("marker").each(function(){var e=t(this).attr("name"),a=t(this).attr("lat"),o=t(this).attr("lng"),n=t(this).attr("address"),l=t(this).attr("address2"),r=t(this).attr("city"),c=t(this).attr("state"),d=t(this).attr("postal"),u=t(this).attr("phone"),p=t(this).attr("web").replace("http://","").replace("https://",""),h=t(this).attr("hours1"),m=t(this).attr("hours2"),f=t(this).attr("hours3"),g=t(this).attr("category"),v=t(this).attr("distance");s[i]=[e,a,o,n,l,r,c,d,u,p,h,m,f,g,v],i++})}}})}function o(){var t=new google.maps.Geocoder;this.geocode=function(e,a,o){t.geocode({address:e,componentRestrictions:{country:a}},function(t,e){if(e===google.maps.GeocoderStatus.OK){var a={};a.latitude=t[0].geometry.location.lat(),a.longitude=t[0].geometry.location.lng(),o(a)}else o(null)})}}s=[],n.MapCurrentPage=0,n.ListCurrentPage=0,i="";var l=n.htcListDataLocation,r=t("#hidden-country-id").val(),c=t("#hidden-country-3166-code").val();if("noStartPoint"===e)l+="?type=list&country="+r,a(l);else{var d,u=t("#"+n.inputID);!0===n.firstTimeRun&&""!==n.htcDefaultAddress?(d=n.htcDefaultAddress,n.firstTimeRun=!1):d=u.val();(new o).geocode(d,c,function(e){if(null!==e){var o,n;n=e.latitude,o=e.longitude;"r"==t.url().param("q")?l+="?q=r&type=map&country="+r+"&lng="+o+"&lat="+n:l+="?type=map&country="+r+"&lng="+o+"&lat="+n,i=n+","+o,a(l)}else l+="?type=map&country="+r+"&address="+encodeURIComponent(d)+"&country3166code="+c,i=encodeURIComponent(d)})}}},t.controls_country={load:function(){var e=0;t.ajax({type:"GET",url:n.htcListDataLocation+"?type=country",dataType:n.dataType,jsonpCallback:"jsonp"===n.dataType?n.jsonpCallback:null,beforeSend:function(){},success:function(a,o,i){"xml"===n.dataType&&t(a).find("marker").each(function(){var a=t(this).attr("c_id"),o=t(this).attr("common_name"),i=t(this).attr("site"),n=t(this).attr("state"),s=t(this).attr("city"),r=t(this).attr("country3166code"),c=t(this).attr("DistanceUnit"),d=t(this).attr("DefaultLocation"),u=t(this).attr("ShowMapSwitch");l[e]=[a,o,i,n,s,r,c,d,u],e++})},complete:function(e,a,o){t.controls_country.bind()}})},bind:function(){l.length>0?n.htcShowCountrySelecttion&&t.controls_country.showup():alert(n.distanceErrorAlert)},showup:function(){if(l.length>0){for(var e=[],a=0;a<l.length;a++)e.push('<option data-showmapswitch="'+l[a][8]+'" data-defaultlocation="'+l[a][7]+'" data-distanceunit="'+l[a][6]+'" data-country3166code="'+l[a][5]+'" value="'+l[a][0]+'">'+l[a][1]+"</option>");t("#country-filter").append(e),t("#country-filter").on("change",function(e){var a=t(this).find("option:selected").val(),o=t(this).find("option:selected").data("country3166code"),i=t(this).find("option:selected").data("distanceunit"),s=t(this).find("option:selected").data("defaultlocation");t(this).find("option:selected").data("showmapswitch");"0"!==a?(t("#hidden-country-id").val(a),t("#hidden-country-3166-code").val(o),t("#hidden-distance-unit").val(i),t("#hidden-default-location").val(s),n.defaultUnit="1"===i?"km":"m",n.htcDefaultAddress=s,t(".address-field.country-selection-only").removeClass("show"),t(".address-field.normal-selection-only").addClass("show"),t(this).parents(".country-selection-only").addClass("arrow-down")):(t(".address-field.country-selection-only").addClass("show"),t(".address-field.normal-selection-only").removeClass("show"),t(this).parents(".country-selection-only").removeClass("arrow-down"))}),t(".country-container").show()}},setup:function(){t.controls_country.load()}},t.controls_switch_view={init:function(){t("."+n.switchViewDiv).on("click",function(e){e.preventDefault(),t("."+n.switchViewDiv).toggleClass("active"),t("."+n.switchViewDiv+".list-view").hasClass("active")?(t(".result-container").addClass("auto-height"),t("#"+n.mapMainContainerDiv).hide(),t("#"+n.listMainContainerDiv).show(),n.htcPageViewType="list"):(t(".result-container").removeClass("auto-height"),t("#"+n.mapMainContainerDiv).show(),t("#"+n.listMainContainerDiv).hide(),n.htcPageViewType="map"),t("#"+n.mapListDiv+" ul").empty(),t("#"+n.listListDiv+" ul").empty(),t.store.publish()})}},t.controls_address={init:function(){function e(){!0===n.autoGeocode&&navigator.geolocation&&navigator.geolocation.getCurrentPosition(a,o)}function a(e){if(""!==(i=null!==e?e.coords.latitude+","+e.coords.longitude:"")){var a=new s,o=new google.maps.LatLng(e.coords.latitude,e.coords.longitude);a.geocode(o,function(e){if(null!==e){var a=e.address;t("#"+n.inputID).val(a)}})}}function o(t){alert(n.autoGeocodeErrorAlert),i=""}function s(){var t=new google.maps.Geocoder;this.geocode=function(e,a){t.geocode({latLng:e},function(t,e){if(e===google.maps.GeocoderStatus.OK){if(t[0]){var o={};o.address=t[0].formatted_address,a(o)}}else alert(n.autoGeocodeErrorAlert),a(null)})}}var l=t("#"+n.inputID),r=t("."+n.resetIconDiv),c=t("."+n.geoIconDiv);r.on("click",function(t){t.preventDefault(),l.val(""),n.showGeoIcon&&c.show(),r.hide()}),c.on("click",function(t){t.preventDefault(),e()}),t("html").hasClass("lt-ie8")||t("html").hasClass("ie8")?(l.focus(function(e){t(this).val().length>0&&(c.hide(),r.show())}),l.on("change",function(e){t(this).val().length>0?(c.hide(),r.show()):(n.showGeoIcon&&c.show(),r.hide())})):l.on("input",function(e){e.preventDefault(),t(this).val().length>0?(c.hide(),r.show()):(n.showGeoIcon&&c.show(),r.hide())}),l.on("keydown",function(e){13===e.keyCode&&(this.blur(),t("#"+n.addressSubmitInput).click())})}},t.controls_address_submit={init:function(){var e=t("#"+n.addressSubmitInput),a=t("#"+n.inputID);e.on("click",function(e){e.preventDefault(),a.val().trim().length>0&&a.val()!==a.data("default")&&""!==a.val()&&(r=!1,t(".near-address").text(a.val()),t.store.filter("hasStartPoint"),t.page_style.reset())})}},t.controls_load_more_stores={setup:function(e){var a=t(".load-more-stores");a.addClass("disable"),a.unbind("click"),e>0&&(a.on("click",function(a){a.preventDefault(),n.ListCurrentPage=e,t("#"+n.listListDiv+" ul").empty(),t.store.publish()}),a.removeClass("disable"))}},t.controls_page_next={setup:function(e){var a=t(".next-btn");a.addClass("disable"),a.unbind("click"),e>0&&(a.on("click",function(a){a.preventDefault(),n.MapCurrentPage=e,t("#"+n.mapListDiv+" ul").empty(),t.store.publish()}),a.removeClass("disable"))}},t.controls_page_previous={setup:function(e){var a=t(".previous-btn");a.addClass("disable"),a.unbind("click"),e>=0&&(a.on("click",function(a){a.preventDefault(),n.MapCurrentPage=e,t("#"+n.mapListDiv+" ul").empty(),t.store.publish()}),a.removeClass("disable"))}},t.controls_list_page_next={setup:function(e){var a=t(".list-next-btn");a.addClass("disable"),a.unbind("click"),e>0&&(a.on("click",function(a){a.preventDefault(),n.ListCurrentPage=e,t("#"+n.listListDiv+" ul").empty(),t.store.publish()}),a.removeClass("disable"))}},t.controls_list_page_previous={setup:function(e){var a=t(".list-previous-btn");a.addClass("disable"),a.unbind("click"),e>=0&&(a.on("click",function(a){a.preventDefault(),n.ListCurrentPage=e,t("#"+n.listListDiv+" ul").empty(),t.store.publish()}),a.removeClass("disable"))}},t.page_style={reset:function(){r&&!n.htcLoadMapInBeginning?(t(".normal-selection-only").addClass("show"),t(".default-information-container").show(),t(".store-locator-container").addClass("show-bg"),t("body").addClass("expand-address-search-box")):(t(".default-information-container").hide(),t(".store-locator-container").removeClass("show-bg"),t("body").removeClass("expand-address-search-box"),t(".result-container").show(),t("#"+n.mapDiv).remove(),t("#"+n.mapMainContainerDiv).append('<div id="'+n.mapDiv+'"></div>'),t("#"+n.mapListDiv+" ul").empty(),t("#"+n.listListDiv+" ul").empty(),n.MapCurrentPage=0,n.ListCurrentPage=0)},showCountrySelectionLayout:function(){t(".country-selection-only").addClass("show"),t(".default-information-container").show(),t(".store-locator-container").addClass("show-bg")},init:function(){n.isMobile&&(n.htcMapViewItemPerPage=20,n.htcMapViewMaxItem=20),n.htcShowCountrySelecttion?(t.page_style.showCountrySelectionLayout(),t.controls_country.setup()):(t.page_style.reset(),n.htcLoadMapInBeginning&&(""!==n.htcDefaultAddress?t.store.filter("hasStartPoint"):t.store.filter("noStartPoint"))),t(".help-field").addClass("show"),n.isMobile&&setTimeout(function(){t("body").animate({scrollTop:"148px"})},2e3)}},this.each(function(){n.dataLocation="/"+n.htcSite+n.dataLocation,n.htcListDataLocation="/"+n.htcSite+n.htcListDataLocation,t.store.load_templates(),t.page_style.init(),n.htcRcDirections=t("#hidden-rc-htcRcDirections").val(),n.mileLang=t("#hidden-rc-mileLang").val(),n.milesLang=t("#hidden-rc-milesLang").val(),n.kilometerLang=t("#hidden-rc-kilometerLang").val(),n.kilometersLang=t("#hidden-rc-kilometersLang").val(),n.distanceErrorAlert=t("#hidden-rc-distanceErrorAlert").val(),n.autoGeocodeErrorAlert=t("#hidden-rc-autoGeocodeErrorAlert").val(),n.addressErrorAlert=t("#hidden-rc-addressErrorAlert").val(),n.blankInputAlert=t("#hidden-rc-blankInputAlert").val();var e=t(".list-next-btn"),a=t(".list-previous-btn");e.text(e.text().replace("{0}",n.htcListViewItemPerPage)),a.text(a.text().replace("{0}",n.htcListViewItemPerPage)),t.controls_address.init(),t.controls_address_submit.init(),t.controls_switch_view.init()})}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
